
Bayesian Quadrature Example
===========================

.. code:: python

    # load matplotlib
    %matplotlib inline
    
    # imports
    import numpy as np
    import scipy.stats
    
    # import the bayesian quadrature object
    from bayesian_quadrature import BQ
    
    # seed the numpy random generator, so we always get the same randomness
    np.random.seed(8728)
First, we need to define various parameters:

.. code:: python

    # number of times to try fitting the GP parameters
    ntry = 10
    
    # (maximum) number of candidate points to choose
    n_candidate = 3
    
    # prior mean and variance
    x_mean = 3.141592653589793
    x_var = 10.0
Now, sample some random :math:`x` points and compute the :math:`y`
points from a standard normal distribution.

.. code:: python

    n = 3
    x = np.random.uniform(-3, 3, n)
    f_y = lambda x: scipy.stats.norm.pdf(x, 0, 1)
    y = f_y(x)
Create the bayesian quadrature object, and fit its parameters.

.. code:: python

    bq = BQ(x, y, ntry, n_candidate, x_mean, x_var, s=0, h=30, w=1)
    bq._fit_log_l()
    bq.gp_log_l.params = (50, 5, 0)
    bq._fit_l()
    bq.gp_l.params = (y.max(), 1, 0)

.. parsed-literal::

    INFO:bayesian_quadrature:Fitting parameters for GP over log(l)
    INFO:bayesian_quadrature:Fitting parameters for GP over exp(log(l))


Plot the result.

.. code:: python

    fig, axes = bq.plot(f_y, xmin=-10, xmax=10)
    
    # x = np.linspace(-10, 10, 1000)
    # gp = GP(GaussianKernel(y.max(), 1, 0)


.. image:: example_files/example_9_0.png


.. code:: python

    bq.Z_mean()



.. parsed-literal::

    0.07961733849477463



.. code:: python

    bq.Z_var()



.. parsed-literal::

    6.01299010583034e-11


